{"version":3,"sources":["models/ObstacleType.tsx","components/Game/Grid.tsx","components/Game/RenderObjectFactory.tsx","components/Game/Obstacle/geometry.ts","components/Game/Obstacle/Obstacle.tsx","components/Game/Obstacle/Boulder.tsx","components/Game/Obstacle/Gravel.tsx","components/Game/Obstacle/WormholeEntrance.tsx","components/Game/Obstacle/WormholeExit.tsx","components/Game/LocationsFactory.tsx","components/Game/Route/Path.tsx","components/Game/Route/StartingLocation.tsx","reducer/interface.ts","components/Game/Route/TargetLocation.tsx","components/Game/Game.tsx","reducer/initialState.ts","reducer/reducer.ts","reducer/actionCreators.ts","components/Controls/GridControl/GridControl.tsx","components/Controls/Switch/Switch.tsx","services/solver.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ObstacleType","CLIP_SPACE","Grid","props","program","useBasicSolid","position","useVector3","lines","useMemo","Array","columnsCount","fill","map","v","i","x","concat","rowsCount","y","geometryProps","vertices","flat","indices","normals","vert","Math","sign","uvs","geometry","useGeometryElements","react_default","a","createElement","Object","assign","drawElements","mode","count","length","RenderObjectFactory","scaleX","scaleY","Fragment","render","column","row","z","BOULDER_GEOMETRY","pyramidGeometryValues","GRAVEL_GEOMETRY","gravelGeometryValues","BLACK_HOLE_GEOMETRY","next","cos","PI","sin","SQUARE_OUTLINE_GEOMETRY","WORMHOLE_EXIT_GEOMETRY","OBSTACLE_COMPONENTS","_OBSTACLE_COMPONENTS","defineProperty","BOULDER","scale","stoneGeometry","GRAVEL","gravelGeometry","WORMHOLE_ENTRANCE","outlineGeometry","blackWorkGeometry","WORMHOLE_EXIT","Obstacle","black","ObstacleToRender","type","LocationsFactory","locations","path","Path","pathGeometryData","flatMap","l","buildPathGeometry","pathGeometry","ActionTypeKeys","GridActionTypeKeys","StartingLocation","startingLocationSign","STARTING_LOCATION_SIGN_GEOMETRY","t","triangle","TargetLocation","wideCircle","WIDE_CIRCLE_GEOMETRY","middleCircle","MIDDLE_CIRCLE_GEOMETRY","smallCircle","SMALL_CIRCLE_GEOMETRY","buildCircleGeometry","radius","arguments","undefined","segments","Game","view","useInvertedMatrix","projection","usePerspectiveMatrix","renderScene","useRender","pathColor","useEffect","obstacles","o","RenderObjectFactory_RenderObjectFactory","key","grid","renderObject","Obstacle_Obstacle","LocationsFactory_LocationsFactory","route","locationsObject","Path_Path","start","StartingLocation_StartingLocation","target","TargetLocation_TargetLocation","Game_Grid","INITIAL_STATE","gridControlAction","reducer","state","action","ADD_BOULDER","objectSpread","toConsumableArray","ADD_GRAVEL","ADD_WORMHOLE_ENTRANCE","ADD_WORMHOLE_EXIT","REMOVE_OBSTACLE","filter","ADD_START_LOCATION","ADD_TARGET_LOCATION","Interface","TOGGLE_GRID_CONTROL_ACTION","data","UPDATE_PATH","CLEAR_ALL_OBSTACLES","createGridAction","toggleGridControlAction","gridControlActionKey","GridControl","_ref","width","height","onClick","className","style","display","gridAutoRows","gridAutoColumns","j","gridRow","gridColumn","Switch","onToggle","isOn","children","solve","nodes","startNode","minimalDistance","previousNode","siblings","targetNode","Infinity","containsObstacle","obstacleType","some","addSiblings","node","possiblePositions","p","isWormholeEntrance","wormholeExits","push","apply","forEach","siblingNode","solveRecursively","currentNode","distanceIncrement","s","buildPath","unshift","GRID_EDITOR_NAMES","_GRID_EDITOR_NAMES","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","clear","updatePath","core_esm","clearColor","Game_Game","GridControl_GridControl_GridControl","gridClickHandler","values","Switch_Switch_Switch","toggleGridAction","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4add2cc3.chunk.js","sourcesContent":["export enum ObstacleType {\n    BOULDER = 'BOULDER',\n    GRAVEL = 'GRAVEL',\n    WORMHOLE_ENTRANCE = 'WORMHOLE_ENTRANCE',\n    WORMHOLE_EXIT = 'WORMHOLE_EXIT'\n}\n","import React, {useMemo} from 'react';\nimport {useBasicSolid } from '@react-vertex/material-hooks';\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport * as Type from '../../reducer/interface';\n\nconst CLIP_SPACE = {\n    from: -1,\n    to: 1,\n    size: 2\n}\n\nconst Grid: React.FC<Type.Grid> = props => {\n    const program = useBasicSolid([1,.8,.8]);\n    const position = useVector3(0,0,0);\n\n    const lines = useMemo(() => Array(props.columnsCount + 1).fill(0).map((v, i) => {\n        const x = CLIP_SPACE.from + CLIP_SPACE.size * i/props.columnsCount;\n        return [\n            [x, CLIP_SPACE.from, 0],\n            [x, CLIP_SPACE.to, 0]\n        ]\n    }).concat(Array(props.rowsCount + 1).fill(0).map((v, i) => {\n        const y = CLIP_SPACE.from + CLIP_SPACE.size * i/props.rowsCount;\n        return [\n            [CLIP_SPACE.from, y, 0],\n            [CLIP_SPACE.to, y, 0]\n        ];\n    })), [props.columnsCount, props.rowsCount]);\n\n    const geometryProps = useMemo(() => ({\n        vertices: lines.flat(2),\n        indices: lines.flat().map((v, i) => i),\n        normals: lines.flat().map(vert => [0, Math.sign(vert[1]), 40]).flat(),\n        uvs: []\n    }), [lines]);\n\n    const geometry = useGeometryElements(geometryProps);\n\n    return (<group>\n        <material program={program}>\n            <geometry\n                position={position}\n                {...geometry}\n                drawElements={{\n                    mode: 'LINES',\n                    count: geometryProps.indices.length\n                }}\n            > </geometry>\n        </material>\n    </group>)\n}\n\nexport default Grid;\n","import React from 'react';\nimport * as Interface from './interface';\n\nexport const RenderObjectFactory:React.FC<Interface.RenderObjectFactory> = props => {\n    const scaleX = 1/props.columnsCount;\n    const scaleY = 1/props.rowsCount;\n    return <>{\n         props.render({\n            x: (props.column + .5) * scaleX * 2  -1,\n            y: -((props.row + .5) * scaleY * 2 -1),\n            z: 0.005, // layering\n            scaleX,\n            scaleY\n        })\n    }</>;\n}\n","import gravelGeometryValues from './gravel.geometry.json';\nimport pyramidGeometryValues from './pyramid.geometry.json';\n\nexport const BOULDER_GEOMETRY = {\n    vertices: pyramidGeometryValues.vertices.flat(),\n    indices: pyramidGeometryValues.vertices.map((v,i) => i),\n    normals: pyramidGeometryValues.normals.flat(),\n    uvs: []\n}\n\nexport const GRAVEL_GEOMETRY = {\n    vertices: gravelGeometryValues.vertices.flat(),\n    indices: gravelGeometryValues.vertices.map((v,i) => i),\n    normals: gravelGeometryValues.normals.flat(),\n    uvs: []\n}\n\nexport const BLACK_HOLE_GEOMETRY = (() => {\n    const radius = .9;\n    const radius2 = .2;\n    const segments = 7;\n    const vertices = Array(segments).fill(0).map((v, i) => {\n        const next = i+1;\n        return [\n            [ 0, 0, 0 ],\n            [\n                radius2*Math.cos(2*Math.PI/segments * i),\n                radius2*Math.sin(2*Math.PI/segments * i),\n                0\n            ],\n            [\n                radius2*Math.cos(2*Math.PI/segments * next),\n                radius2*Math.sin(2*Math.PI/segments * next),\n                0\n            ],\n            [\n                radius2*Math.cos(2*Math.PI/segments * i),\n                radius2*Math.sin(2*Math.PI/segments * i),\n                0\n            ],\n            [\n                radius2*Math.cos(2*Math.PI/segments * next),\n                radius2*Math.sin(2*Math.PI/segments * next),\n                0\n            ],\n            [\n                radius*Math.cos(2*Math.PI/segments * i),\n                radius*Math.sin(2*Math.PI/segments * i),\n                0\n            ],\n        ]\n    }).flat();\n\n    return {\n        vertices: vertices.flat(),\n        indices: vertices.map((v,i) => i),\n        normals: [],\n        uvs: []\n    }\n})();\n\nexport const SQUARE_OUTLINE_GEOMETRY = {\n    vertices: [\n        -1,-1,0,\n        -1,1,0,\n        1,1,0,\n        1,-1,0\n    ],\n    indices: [0,1,1,2,2,3,3,0],\n    normals: [],\n    uvs: []\n}\n\nexport const WORMHOLE_EXIT_GEOMETRY = (() => {\n    const radius = .7;\n    const radius2 = .6;\n    const segments = 14;\n    const vertices = Array(segments).fill(0).map((v, i) => {\n        const next = i+1;\n        return [\n            [\n                radius*Math.cos(2*Math.PI/segments * i),\n                radius*Math.sin(2*Math.PI/segments * i),\n                .5\n            ],\n            [\n                radius2*Math.cos(2*Math.PI/segments * next),\n                radius2*Math.sin(2*Math.PI/segments * next),\n                0\n            ],\n        ]\n    }).flat();\n\n    return {\n        vertices: vertices.flat(),\n        indices: vertices.map((v,i) => i),\n        normals: [],\n        uvs: []\n    }\n})();\n","import React from 'react';\nimport {useBasicSolid } from '@react-vertex/material-hooks';\nimport { Boulder } from './Boulder';\nimport { Gravel } from './Gravel';\nimport {WormholeEntrance} from './WormholeEntrance';\nimport { WormholeExit } from './WormholeExit';\nimport * as Type from '../interface';\n\nimport {ObstacleType} from '../../../models/ObstacleType';\n\nconst OBSTACLE_COMPONENTS = {\n    [ObstacleType.BOULDER]: Boulder,\n    [ObstacleType.GRAVEL]: Gravel,\n    [ObstacleType.WORMHOLE_ENTRANCE]: WormholeEntrance,\n    [ObstacleType.WORMHOLE_EXIT]: WormholeExit\n}\n\nexport const Obstacle: React.FC<Type.Obstacle> = props => {\n    const black = useBasicSolid([0,0,0]);\n    const ObstacleToRender = OBSTACLE_COMPONENTS[props.type] || null;\n    return (\n        <material program={black}>\n            <ObstacleToRender {...props}></ObstacleToRender>\n        </material>\n    );\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport { BOULDER_GEOMETRY } from './geometry';\nimport * as Type from '../interface';\n\nexport const Boulder:React.FC<Type.RenderObject> = props => {\n    const position = useVector3(props.x, props.y, props.z);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n\n    const stoneGeometry = useGeometryElements(BOULDER_GEOMETRY);\n\n    return (\n        <group>\n            <geometry position={position} scale={scale} {...stoneGeometry} drawElements={{\n                mode: 'LINE_STRIP',\n                count: BOULDER_GEOMETRY.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport { GRAVEL_GEOMETRY } from './geometry';\nimport * as Type from '../interface';\n\nexport const Gravel:React.FC<Type.RenderObject> = props => {\n    const position = useVector3(props.x, props.y, props.z);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n    const gravelGeometry = useGeometryElements(GRAVEL_GEOMETRY);\n\n    return (\n        <group>\n            <geometry position={position} scale={scale} {...gravelGeometry} drawElements={{\n                mode: 'LINES',\n                count: GRAVEL_GEOMETRY.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport { SQUARE_OUTLINE_GEOMETRY, BLACK_HOLE_GEOMETRY } from './geometry';\nimport * as Type from '../interface';\n\nexport const WormholeEntrance:React.FC<Type.RenderObject> = props => {\n\n    const position = useVector3(props.x, props.y, props.z);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n\n    const outlineGeometry = useGeometryElements(SQUARE_OUTLINE_GEOMETRY);\n    const blackWorkGeometry = useGeometryElements(BLACK_HOLE_GEOMETRY);\n    return (\n            <group>\n                <geometry position={position} scale={scale} {...outlineGeometry} drawElements={{\n                    mode: 'LINES',\n                    count: SQUARE_OUTLINE_GEOMETRY.indices.length\n                }}>\n                </geometry>\n                <geometry position={position} scale={scale} {...blackWorkGeometry} drawElements={{\n                    mode: 'TRIANGLES',\n                    count: BLACK_HOLE_GEOMETRY.indices.length\n                }}>\n                </geometry>\n            </group>\n    );\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport { SQUARE_OUTLINE_GEOMETRY, WORMHOLE_EXIT_GEOMETRY } from './geometry';\nimport * as Type from '../interface';\n\nexport const WormholeExit:React.FC<Type.RenderObject> = props => {\n    const position = useVector3(props.x, props.y, props.z);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n\n    const outlineGeometry = useGeometryElements(SQUARE_OUTLINE_GEOMETRY);\n    const blackWorkGeometry = useGeometryElements(WORMHOLE_EXIT_GEOMETRY);\n    return (\n        <group>\n            <geometry position={position} scale={scale} {...outlineGeometry} drawElements={{\n                mode: 'LINES',\n                count: SQUARE_OUTLINE_GEOMETRY.indices.length\n            }}>\n            </geometry>\n            <geometry position={position} scale={scale} {...blackWorkGeometry} drawElements={{\n                mode: 'LINE_LOOP',\n                count: WORMHOLE_EXIT_GEOMETRY.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n","import React from 'react';\nimport * as Interface from './interface';\n\nexport const LocationsFactory:React.FC<Interface.LocationsFactory> = props => {\n    const scaleX = 1/props.columnsCount;\n    const scaleY = 1/props.rowsCount;\n    const locations = props.path.map(position => ({\n        x: (position.column + .5) * scaleX * 2  -1,\n        y: -((position.row + .5) * scaleY * 2 -1),\n        z: 0\n    }))\n    return <>{\n         props.render({locations})\n    }</>;\n}\n","import React, { useMemo } from 'react';\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport * as Type from '../interface';\n\nexport const Path: React.FC<Type.Locations> = props => {\n    const position = useVector3(0,0,0);\n    const pathGeometryData = useMemo(() => buildPathGeometry(props.locations), [props.locations]);\n    const pathGeometry = useGeometryElements(pathGeometryData);\n    return (\n        <group>\n            <geometry position={position} {...pathGeometry} drawElements={{\n                mode: 'LINES',\n                count: pathGeometryData.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n\n\nfunction buildPathGeometry(locations) {\n    const vertices = locations.flatMap((l, i) => {\n        const v = [l.x, l.y, 0];\n        return (i === 0 || i === locations.length - 1) ? [v] : [v , v];\n    });\n\n    return {\n        vertices: vertices.flat(),\n        indices: vertices.map((v,i) => i),\n        normals: [],\n        uvs: []\n    };\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport * as Type from '../interface';\n\nexport const StartingLocation:React.FC<Type.RenderObject> = props => {\n    const position = useVector3(props.x, props.y, 0);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n    const startingLocationSign = useGeometryElements(STARTING_LOCATION_SIGN_GEOMETRY);\n\n    return (\n        <group>\n            <geometry position={position} scale={scale} {...startingLocationSign} drawElements={{\n                mode: 'LINES',\n                count: STARTING_LOCATION_SIGN_GEOMETRY.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n\nconst STARTING_LOCATION_SIGN_GEOMETRY = (() => {\n    const t = {\n        w: 1.5,\n        h: 1,\n        x: 0,\n        y: 0\n    };\n\n    const triangle = [\n        [t.x-t.w/2, t.y-t.h/2, 0],\n        [t.x + t.w/2, t.y - t.h/2, 0],\n        [t.x, t.y + t.h/2, 0]\n    ];\n\n\n    const vertices = [\n        triangle[0],\n        triangle[1],\n        triangle[1],\n        triangle[2],\n        triangle[2],\n        triangle[0],\n\n        triangle[0].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n        triangle[1].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n        triangle[1].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n        triangle[2].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n        triangle[2].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n        triangle[0].map((v,i) => (i === 1 ? v + t.h/3 : v) ),\n\n        triangle[0].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n        triangle[1].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n        triangle[1].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n        triangle[2].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n        triangle[2].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n        triangle[0].map((v,i) => (i === 1 ? v - t.h/3 : v) ),\n\n    ];\n\n    return {\n        vertices: vertices.flat(),\n        indices: vertices.map((v, i) => i),\n        normals: [],\n        uvs: []\n    };\n})();\n","import {ObstacleType} from '../models';\n\nexport interface Position {\n    row: number,\n    column: number,\n}\n\nexport interface State {\n    grid: Grid,\n    obstacles: Array<Obstacle>,\n    route: Route,\n    gridControlAction?: GridActionTypeKeys,\n}\n\nexport interface Grid {\n    rowsCount: number;\n    columnsCount: number;\n}\n\nexport interface Path {\n    path: Array<Position>\n}\n\nexport interface Route extends Path{\n    start: Position\n    target: Position\n}\n\nexport interface Obstacle extends Position {\n    type: ObstacleType\n}\n\nexport interface GridControl extends Grid {\n    width: number,\n    height: number,\n    onClick: (position: Position) => void\n}\n\nexport interface Switch {\n    isOn: boolean,\n    onToggle: (isOn: boolean) => void\n}\n\n\nexport enum ActionTypeKeys {\n    TOGGLE_GRID_CONTROL_ACTION = 'TOGGLE_GRID_CONTROL_ACTION',\n    UPDATE_PATH = 'UPDATE_PATH',\n    CLEAR_ALL_OBSTACLES = 'CLEAR_ALL_OBSTACLES'\n}\n\nexport enum GridActionTypeKeys {\n    ADD_BOULDER = 'ADD_BOULDER',\n    ADD_GRAVEL = 'ADD_GRAVEL',\n    ADD_WORMHOLE_ENTRANCE = 'ADD_WORMHOLE_ENTRANCE',\n    ADD_WORMHOLE_EXIT = 'ADD_WORMHOLE_EXIT',\n    REMOVE_OBSTACLE = 'REMOVE_OBSTACLE',\n\n    ADD_START_LOCATION = 'ADD_START_LOCATION',\n    ADD_TARGET_LOCATION = 'ADD_TARGET_LOCATION',\n}\n\nexport interface GridAction {\n    type: GridActionTypeKeys,\n    column: number,\n    row: number\n}\n\nexport interface AppAction {\n    type: ActionTypeKeys,\n    data?: any\n}\n","import React from 'react';\n\nimport { useGeometryElements} from '@react-vertex/geometry-hooks';\nimport {useVector3} from '@react-vertex/math-hooks';\nimport * as Type from '../interface';\n\nexport const TargetLocation:React.FC<Type.RenderObject> = props => {\n    const position = useVector3(props.x, props.y, 0);\n    const scale = [props.scaleX, props.scaleY, props.scaleY];\n\n    const wideCircle = useGeometryElements(WIDE_CIRCLE_GEOMETRY);\n    const middleCircle = useGeometryElements(MIDDLE_CIRCLE_GEOMETRY);\n    const smallCircle = useGeometryElements(SMALL_CIRCLE_GEOMETRY);\n\n    return (\n        <group>\n            <geometry position={position} scale={scale} {...wideCircle} drawElements={{\n                mode: 'LINE_LOOP',\n                count: WIDE_CIRCLE_GEOMETRY.indices.length\n            }}>\n            </geometry>\n            <geometry position={position} scale={scale} {...middleCircle} drawElements={{\n                mode: 'LINE_LOOP',\n                count: MIDDLE_CIRCLE_GEOMETRY.indices.length\n            }}>\n            </geometry>\n            <geometry position={position} scale={scale} {...smallCircle} drawElements={{\n                mode: 'LINE_LOOP',\n                count: SMALL_CIRCLE_GEOMETRY.indices.length\n            }}>\n            </geometry>\n        </group>\n    );\n}\n\nconst buildCircleGeometry = (radius = 1, segments = 14) => {\n    const vertices = Array(segments).fill(0).map((v, i) => {\n        return [\n            radius*Math.cos(2*Math.PI/segments * i),\n            radius*Math.sin(2*Math.PI/segments * i),\n            0\n        ];\n    });\n\n    return {\n        vertices: vertices.flat(),\n        indices: vertices.map((v,i) => i),\n        normals: [],\n        uvs: []\n    }\n}\n\nconst WIDE_CIRCLE_GEOMETRY = buildCircleGeometry(.9, 25);\nconst MIDDLE_CIRCLE_GEOMETRY = buildCircleGeometry(.6, 19);\nconst SMALL_CIRCLE_GEOMETRY = buildCircleGeometry(.3, 15);\n\n","import React, { useEffect } from 'react';\n\nimport {\n    useInvertedMatrix,\n    usePerspectiveMatrix,\n} from '@react-vertex/math-hooks';\n\nimport {useRender} from '@react-vertex/core';\nimport Grid from './Grid';\n\nimport * as StateType from '../../reducer/interface';\nimport {useBasicSolid } from '@react-vertex/material-hooks';\nimport { RenderObjectFactory } from './RenderObjectFactory';\nimport { Obstacle } from './Obstacle';\nimport { LocationsFactory } from './LocationsFactory';\nimport { Path } from './Route/Path';\nimport { StartingLocation } from './Route/StartingLocation';\nimport { TargetLocation } from './Route/TargetLocation';\n\nexport const Game: React.FC<StateType.State> = props => {\n    const view = useInvertedMatrix(0, 0, 5.15);\n    const projection = usePerspectiveMatrix(22, 1, 1, 1000);\n    const renderScene = useRender();\n\n    const pathColor = useBasicSolid([.8,1,1]);\n\n    useEffect(() => {\n        renderScene();\n    });\n\n    return (<camera view={view} projection={projection}>\n        {\n            props.obstacles.map((o, i) => (\n            <RenderObjectFactory key={i} {...o} {...props.grid} render={renderObject => (\n                <Obstacle {...renderObject} type={o.type}></Obstacle>\n            )} ></RenderObjectFactory>))\n        }\n\n        <material program={pathColor}>\n            <LocationsFactory {...props.route} {...props.grid} render={locationsObject => (\n                <Path {...locationsObject}></Path>\n            )}></LocationsFactory>\n            <RenderObjectFactory {...props.route.start} {...props.grid} render={renderObject => (\n                <StartingLocation {...renderObject}></StartingLocation>\n            )}></RenderObjectFactory>\n            <RenderObjectFactory {...props.route.target} {...props.grid} render={renderObject => (\n                <TargetLocation {...renderObject}></TargetLocation>\n            )}></RenderObjectFactory>\n        </material>\n\n        <Grid {...props.grid}></Grid>\n    </camera>);\n}\n","import * as t from './interface';\nexport const INITIAL_STATE: t.State = {\n    obstacles: [ ],\n    grid: {\n        columnsCount: 10,\n        rowsCount: 10,\n    },\n    route: {\n        start: {\n            row: 0,\n            column: 0\n        },\n        target: {\n            row: 9,\n            column: 9\n        },\n        path: [ ]\n    },\n    gridControlAction: undefined\n}\n","import * as Interface from './interface';\nimport {GridActionTypeKeys} from './interface';\nimport {INITIAL_STATE} from './initialState';\nimport { ObstacleType } from '../models';\nexport const reducer = (state: Interface.State = INITIAL_STATE , action: Interface.GridAction | Interface.AppAction): Interface.State => {\n    switch (action.type) {\n        case GridActionTypeKeys.ADD_BOULDER: {\n            return {\n                ...state,\n                obstacles: [...state.obstacles, {\n                    type: ObstacleType.BOULDER,\n                    row: action.row,\n                    column: action.column\n                }]\n            }\n        } case GridActionTypeKeys.ADD_GRAVEL : {\n            return {\n                ...state,\n                obstacles: [...state.obstacles, {\n                    type: ObstacleType.GRAVEL,\n                    row: action.row,\n                    column: action.column\n                }]\n            }\n        } case GridActionTypeKeys.ADD_WORMHOLE_ENTRANCE : {\n            return {\n                    ...state,\n                obstacles: [...state.obstacles, {\n                    type: ObstacleType.WORMHOLE_ENTRANCE,\n                    row: action.row,\n                    column: action.column\n                }]\n            }\n\n        } case GridActionTypeKeys.ADD_WORMHOLE_EXIT : {\n            return {\n                ...state,\n                obstacles: [...state.obstacles, {\n                    type: ObstacleType.WORMHOLE_EXIT,\n                    row: action.row,\n                    column: action.column\n                }]\n            }\n\n        } case GridActionTypeKeys.REMOVE_OBSTACLE : {\n            return {\n                ...state,\n                obstacles: [...state.obstacles.filter(o => {\n                    return o.row !== action.row || o.column !== action.column\n                })]\n            }\n        } case GridActionTypeKeys.ADD_START_LOCATION : {\n            return {\n                ...state,\n                route: {\n                    ...state.route,\n                    start: {\n                        row: action.row,\n                        column: action.column\n                    }\n                }\n            }\n        } case GridActionTypeKeys.ADD_TARGET_LOCATION : {\n            return {\n                ...state,\n                route: {\n                    ...state.route,\n                    target: {\n                        row: action.row,\n                        column: action.column\n                    }\n                }\n            }\n        } case Interface.ActionTypeKeys.TOGGLE_GRID_CONTROL_ACTION: {\n            return {\n                ...state,\n                gridControlAction: action.data\n            }\n        } case Interface.ActionTypeKeys.UPDATE_PATH : {\n            return {\n                ...state,\n                route: {\n                    ...state.route,\n                    path: action.data\n                }\n            }\n        } case Interface.ActionTypeKeys.CLEAR_ALL_OBSTACLES : {\n            return {\n                ...state,\n                obstacles: []\n            }\n        }\n    }\n}\n","import * as Interface from './interface';\n\nexport const createGridAction = (key: Interface.GridActionTypeKeys, position: Interface.Position) => ({\n    type: key,\n    ...position\n});\n\nexport const toggleGridControlAction = (gridControlActionKey: Interface.GridActionTypeKeys) => ({\n    type: Interface.ActionTypeKeys.TOGGLE_GRID_CONTROL_ACTION,\n    data: gridControlActionKey\n});\n\n\nexport const updatePath = (path: Array<Interface.Position>) => ({\n    type: Interface.ActionTypeKeys.UPDATE_PATH,\n    data: path\n});\n\n\nexport const clearAll = () => ({\n    type: Interface.ActionTypeKeys.CLEAR_ALL_OBSTACLES\n});\n","import React, {useMemo} from 'react';\nimport * as Interface from '../../../reducer/interface';\nimport './GridControl.scss';\n\nexport const GridControl:React.FC<Interface.GridControl> = ({\n    rowsCount,\n    columnsCount,\n    width,\n    height,\n    onClick\n}) => {\n    return (\n        <div className=\"grid-control\" style={{\n            width: `${width}px`,\n            height: `${height}px`,\n            display: 'grid',\n            gridAutoRows: height/rowsCount,\n            gridAutoColumns: width/columnsCount\n        }}>\n            {\n                useMemo(() => Array(rowsCount).fill(0).flatMap((v, i) => {\n                    return Array(columnsCount).fill(0).map((v, j) => {\n                        return <div className=\"grid-item\" onClick={() => onClick({row: i, column: j})} style={{\n                            gridRow: i+1,\n                            gridColumn: j+1\n                        }}></div>\n                    })\n                }), [rowsCount, columnsCount, onClick])\n            }\n        </div>\n    )\n}\n","import React from 'react';\nimport * as Interface from '../../../reducer/interface';\nimport './Switch.scss';\n\nexport const Switch:React.FC<Interface.Switch> = props => {\n    return (<div className=\"switch-control-component\">\n        <div className=\"switch-button\" onClick={() => props.onToggle(!props.isOn)}>\n            <div className={props.isOn ? 'toggled' : null}></div>\n        </div>\n        <div>{props.children}</div>\n    </div>);\n}\n","import * as Interface from '../reducer/interface';\nimport {ObstacleType} from '../models/ObstacleType';\n\n\n\nconst buildPath = (targetNode, path = []) => {\n    if (targetNode.previousNode) {\n        path.unshift(targetNode.position);\n        return buildPath(targetNode.previousNode, path);\n    } else if (path.length > 0) {\n        path.unshift(targetNode.position);\n    }\n    return path;\n}\n\n\nexport const solve = (\n    grid: Interface.Grid,\n    obstacles: Array<Interface.Obstacle>,\n    start: Interface.Position,\n    target: Interface.Position\n) => {\n    const nodes:Array<Array<Node>> = Array(grid.rowsCount).fill(0).map(v =>\n                                        Array(grid.columnsCount).fill(undefined));\n    const startNode = {\n        position: start,\n        minimalDistance: 0,\n        previousNode: undefined,\n        siblings: []\n    }\n    const targetNode = {\n        position: target,\n        minimalDistance: Infinity,\n        previousNode: undefined,\n        siblings: []\n    }\n\n    nodes[start.row][start.column] = startNode;\n    nodes[target.row][target.column] = targetNode;\n\n    const containsObstacle = (position: Interface.Position, obstacleType: ObstacleType) => {\n        return obstacles.some(o => {\n            return o.type === obstacleType\n                && o.row === position.row\n                && o.column === position.column;\n        });\n    }\n\n    const isValidPosition = (\n        position: Interface.Position,\n    ) => {\n        return !(\n            position.column < 0\n            || position.row < 0\n            || position.column >= grid.columnsCount\n            || position.row >= grid.rowsCount\n            || containsObstacle(position, ObstacleType.BOULDER)\n        );\n    }\n\n    const isWormholeEntrance = (node: Node) => {\n        return containsObstacle(node.position, ObstacleType.WORMHOLE_ENTRANCE);\n    }\n\n    const addSiblings = (node: Node) => {\n        const possiblePositions = [\n            {row: node.position.row+1, column: node.position.column },\n            {row: node.position.row, column: node.position.column+1 },\n            {row: node.position.row-1, column: node.position.column },\n            {row: node.position.row, column: node.position.column-1 },\n        ].filter(p => isValidPosition(p));\n\n        if (isWormholeEntrance(node)) {\n            const wormholeExits = obstacles.filter(o => o.type === ObstacleType.WORMHOLE_EXIT);\n            possiblePositions.push(...wormholeExits);\n        }\n\n        possiblePositions.forEach(p => {\n            let siblingNode:Node = nodes[p.row][p.column];\n            if (!siblingNode) {\n                siblingNode = {\n                    position: p,\n                    minimalDistance: Infinity,\n                    previousNode: undefined,\n                    siblings: []\n                }\n                nodes[p.row][p.column] = siblingNode;\n            }\n            node.siblings.push(siblingNode);\n        })\n    }\n\n    const getDistanceIncrease = (node:Node) => {\n        return containsObstacle(node.position, ObstacleType.GRAVEL) ? 2 : 1;\n    }\n\n    const solveRecursively = (currentNode:Node, targetNode: Node) => {\n        if (currentNode.minimalDistance > targetNode.minimalDistance) {\n            return;\n        } else if (currentNode === targetNode) {\n            return;\n        } else if (currentNode.siblings.length === 0) {\n            addSiblings(currentNode);\n        }\n        const distanceIncrement = getDistanceIncrease(currentNode);\n        currentNode.siblings.forEach(s => {\n            if (s.minimalDistance > currentNode.minimalDistance + distanceIncrement) {\n                s.minimalDistance = currentNode.minimalDistance + distanceIncrement\n                s.previousNode = currentNode;\n                solveRecursively(s, targetNode);\n            }\n        });\n    }\n\n    solveRecursively(startNode, targetNode);\n    return buildPath(targetNode);\n}\n\n\ninterface Node {\n    position: Interface.Position,\n    minimalDistance: number,\n    previousNode: Node,\n    siblings: Array<Node>,\n}\n","import React, { useReducer, useEffect } from 'react';\nimport  {Game} from './components/Game';\nimport './App.scss';\nimport * as Interface from './reducer/interface';\nimport {GridActionTypeKeys} from './reducer/interface';\nimport {Canvas} from '@react-vertex/core';\nimport {INITIAL_STATE, reducer, createGridAction, toggleGridControlAction, updatePath, clearAll} from './reducer';\nimport { GridControl } from './components/Controls/GridControl/GridControl';\nimport {Switch} from './components/Controls/Switch/Switch';\nimport {solve} from './services/solver';\n\n\nconst GRID_EDITOR_NAMES = {\n  [GridActionTypeKeys.ADD_BOULDER]: 'Boulder',\n  [GridActionTypeKeys.ADD_GRAVEL]: 'Gravel',\n  [GridActionTypeKeys.ADD_START_LOCATION]: 'Start',\n  [GridActionTypeKeys.ADD_TARGET_LOCATION]: 'Target',\n  [GridActionTypeKeys.ADD_WORMHOLE_ENTRANCE]: 'Wormhole Ent.',\n  [GridActionTypeKeys.ADD_WORMHOLE_EXIT]: 'Wormhole Exit',\n  [GridActionTypeKeys.REMOVE_OBSTACLE]: 'Clear'\n}\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  const gridClickHandler = (p:Interface.Position) => {\n    if (state.gridControlAction ) {\n      dispatch(createGridAction(Interface.GridActionTypeKeys.REMOVE_OBSTACLE, p));\n      dispatch(createGridAction(state.gridControlAction, p));\n    }\n  }\n\n  const toggleGridAction = (key: Interface.GridActionTypeKeys, isOn) => {\n    if (isOn) {\n      dispatch(toggleGridControlAction(key));\n    } else {\n      dispatch(toggleGridControlAction(undefined));\n    }\n  }\n\n  const clear = () => {\n    dispatch(clearAll());\n  }\n\n  const grid = state.grid;\n  const obstacles = state.obstacles;\n  const start = state.route.start;\n  const target = state.route.target;\n  useEffect(() => {\n    const path = solve(grid, obstacles, start, target);\n    dispatch(updatePath(path));\n  }, [grid, obstacles, start, target]);\n\n  return (\n    <div className=\"world camera\">\n      <div className=\"scene\">\n        <div className=\"screen\">\n          <div className=\"game-pane\">\n            <div className={'not-found ' + (state.route.path.length === 0 ? 'show' : 'hide') }>route was not found</div>\n            <div className=\"canvas\">\n              <Canvas width={500} height={500} clearColor={[0,0,0,0.1]}>\n                <Game {...state}></Game>\n              </Canvas>\n            </div>\n            <GridControl {...state.grid} width={500} height={500} onClick={p => gridClickHandler(p)}></GridControl>\n          </div>\n\n          <div className=\"controls-pane\">\n            <div className=\"with-geometry fill-parent\">\n              Please fill the field using:\n              {\n                Object.values(GridActionTypeKeys).map(key => (\n                  <Switch\n                    isOn={state.gridControlAction === key}\n                    onToggle={isOn => toggleGridAction(key, isOn)}>\n                    { GRID_EDITOR_NAMES[key] }\n                  </Switch>\n                ))\n              }\n            </div>\n\n            <div className=\"with-structure shelf\">\n              <button className=\"button\" onClick={() => clear()}>clear</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}